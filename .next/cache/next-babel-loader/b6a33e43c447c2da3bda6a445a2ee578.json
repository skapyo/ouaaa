{"ast":null,"code":"import passwordValidator from 'password-validator';\n\nvar validatePasswordFormat = function validatePasswordFormat(password) {\n  var passwordToValidate = !password ? ' ' : password;\n  var schema = new passwordValidator();\n  schema.is().min(8).is().max(15).has().uppercase().has().lowercase().has().digits().has().symbols().has().not().spaces().is().not().oneOf(['Passw0rd', 'Password123']);\n  var result = schema.validate(passwordToValidate, {\n    list: true\n  });\n\n  if (typeof result === \"boolean\") {\n    throw new Error(\"schema validate returned a boolean instead of a string array\");\n  }\n\n  return result;\n};\n\nexport default validatePasswordFormat; // const validatePasswordFormat = (password ) => {\n//     let passwordToValidate =(!password) ? ' ' : password\n//     var schema = new passwordValidator();\n//     schema\n//     .is().min(8)                                    \n//     .is().max(15)                                  \n//     .has().uppercase()                              \n//     .has().lowercase()                             \n//     .has().digits()                                \n//     .has().symbols()                          \n//     .has().not().spaces()                           \n//     .is().not().oneOf(['Passw0rd', 'Password123']); \n//     return schema.validate(passwordToValidate,{ list: true })\n// }\n// export default validatePasswordFormat","map":{"version":3,"sources":["C:/Users/skaPy/IdeaProjects/Next.js-boilerplate/oozie-client/utils/validatePasswordFormat.tsx"],"names":["passwordValidator","validatePasswordFormat","password","passwordToValidate","schema","is","min","max","has","uppercase","lowercase","digits","symbols","not","spaces","oneOf","result","validate","list","Error"],"mappings":"AAAA,OAAOA,iBAAP,MAA8B,oBAA9B;;AAEA,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,QAAD,EAAkC;AAE7D,MAAIC,kBAAkB,GAAG,CAACD,QAAF,GAAc,GAAd,GAAoBA,QAA5C;AAEA,MAAIE,MAAM,GAAG,IAAIJ,iBAAJ,EAAb;AAEAI,EAAAA,MAAM,CACLC,EADD,GACMC,GADN,CACU,CADV,EAECD,EAFD,GAEME,GAFN,CAEU,EAFV,EAGCC,GAHD,GAGOC,SAHP,GAICD,GAJD,GAIOE,SAJP,GAKCF,GALD,GAKOG,MALP,GAMCH,GAND,GAMOI,OANP,GAOCJ,GAPD,GAOOK,GAPP,GAOaC,MAPb,GAQCT,EARD,GAQMQ,GARN,GAQYE,KARZ,CAQkB,CAAC,UAAD,EAAa,aAAb,CARlB;AAUA,MAAMC,MAAM,GAAGZ,MAAM,CAACa,QAAP,CAAgBd,kBAAhB,EAAmC;AAAEe,IAAAA,IAAI,EAAE;AAAR,GAAnC,CAAf;;AAEA,MAAI,OAAOF,MAAP,KAAkB,SAAtB,EAAiC;AAC7B,UAAM,IAAIG,KAAJ,CAAU,8DAAV,CAAN;AACH;;AAED,SAAOH,MAAP;AACH,CAvBD;;AAyBA,eAAef,sBAAf,C,CAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA","sourcesContent":["import passwordValidator from 'password-validator'\r\n\r\nconst validatePasswordFormat = (password : string) : string[] => {\r\n\r\n    let passwordToValidate =(!password) ? ' ' : password\r\n\r\n    var schema = new passwordValidator();\r\n\r\n    schema\r\n    .is().min(8)                                    \r\n    .is().max(15)                                  \r\n    .has().uppercase()                              \r\n    .has().lowercase()                             \r\n    .has().digits()                                \r\n    .has().symbols()                          \r\n    .has().not().spaces()                           \r\n    .is().not().oneOf(['Passw0rd', 'Password123']); \r\n\r\n    const result = schema.validate(passwordToValidate,{ list: true })\r\n    \r\n    if (typeof result === \"boolean\") {\r\n        throw new Error(\"schema validate returned a boolean instead of a string array\")\r\n    }\r\n    \r\n    return result\r\n}\r\n\r\nexport default validatePasswordFormat\r\n\r\n// const validatePasswordFormat = (password ) => {\r\n\r\n//     let passwordToValidate =(!password) ? ' ' : password\r\n\r\n//     var schema = new passwordValidator();\r\n\r\n//     schema\r\n//     .is().min(8)                                    \r\n//     .is().max(15)                                  \r\n//     .has().uppercase()                              \r\n//     .has().lowercase()                             \r\n//     .has().digits()                                \r\n//     .has().symbols()                          \r\n//     .has().not().spaces()                           \r\n//     .is().not().oneOf(['Passw0rd', 'Password123']); \r\n\r\n//     return schema.validate(passwordToValidate,{ list: true })\r\n// }\r\n\r\n// export default validatePasswordFormat\r\n\r\n"]},"metadata":{},"sourceType":"module"}
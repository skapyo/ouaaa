{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\skaPy\\\\IdeaProjects\\\\Next.js-boilerplate\\\\oozie-client\\\\containers\\\\forms\\\\ResetPassword\\\\ResetPasswordForm.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  mutation sendResetPasswordEmail($formValues: ResetPasswordInfos) {\\n    sendResetPasswordEmail(resetPasswordInfos: $formValues)\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport gql from \"graphql-tag\";\nimport FormController, { ValidationRuleType } from \"components/controllers/FormController\";\nimport { withApollo } from \"hoc/withApollo\";\nimport { useState, useCallback } from \"react\";\nimport ResetPasswordEmailForm from \"containers/forms/ResetPassword/subForms/SendResetPsswdEmailForm\";\nimport ValidateEmailCodeForm from \"./subForms/ValidateEmailCodeForm\";\nimport { Container, Box, Avatar, Typography } from \"@material-ui/core\";\nimport VpnKeyOutlinedIcon from \"@material-ui/icons/VpnKeyOutlined\";\nimport { makeStyles } from \"@material-ui/core\";\nvar useStyles = makeStyles(function (theme) {\n  return {\n    avatar: {\n      margin: theme.spacing(1),\n      backgroundColor: theme.palette.secondary.main\n    },\n    title: {\n      marginBottom: theme.spacing(3)\n    }\n  };\n});\n\nvar ResetPasswordFormLayout = function ResetPasswordFormLayout(_ref) {\n  _s();\n\n  var children = _ref.children;\n  var styles = useStyles();\n  return __jsx(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, __jsx(Box, {\n    marginTop: 8,\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(Avatar, {\n    className: styles.avatar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, __jsx(VpnKeyOutlinedIcon, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  })), __jsx(Typography, {\n    component: \"h1\",\n    variant: \"h5\",\n    className: styles.title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, \"Mot de passe perdu\"), children));\n};\n/* Reset password email form : step 0*/\n\n\n_s(ResetPasswordFormLayout, \"3bjLmUB54uhXRX+frDMowQzU8P8=\", false, function () {\n  return [useStyles];\n});\n\n_c = ResetPasswordFormLayout;\nvar SEND_PASSWORD_RESET_EMAIL = gql(_templateObject());\nvar validationRules0 = {\n  email: {\n    rule: ValidationRuleType.email\n  }\n};\n/* -- */\n\n/* reset code validation form : step 1*/\n// const SEND_PASSWORD_RESET_EMAIL = gql`\n//   mutation sendResetPasswordEmail($formValues: ResetPasswordInfos) {\n//     sendResetPasswordEmail(resetPasswordInfos: $formValues)\n//   }\n// `\n\nvar validationRules1 = {\n  input1: {\n    rule: ValidationRuleType.only,\n    type: \"number\"\n  },\n  input2: {\n    rule: ValidationRuleType.only,\n    type: \"number\"\n  },\n  input3: {\n    rule: ValidationRuleType.only,\n    type: \"number\"\n  },\n  input4: {\n    rule: ValidationRuleType.only,\n    type: \"number\"\n  }\n};\n/* -- */\n\nexport var EmailContext = React.createContext({\n  email: null,\n  codeId: null\n});\n\nvar ResetPasswordForm = function ResetPasswordForm() {\n  _s2();\n\n  /* state of the form\r\n   * 0: init state > send reset password email form\r\n   * 1: form to validate the code received in the reset password email\r\n   * 2: form to reset the password\r\n   */\n  var _useState = useState(0),\n      formState = _useState[0],\n      setFormState = _useState[1];\n\n  var _useState2 = useState({\n    email: null,\n    codeId: null\n  }),\n      context = _useState2[0],\n      setContext = _useState2[1];\n\n  var queryOptions0 = {\n    query: SEND_PASSWORD_RESET_EMAIL,\n    resultLabel: \"sendResetPasswordEmail\",\n    snackbarSucceedMessage: \"Un email vous a été envoyé.\",\n    afterResultControlCallback: useCallback(function (formvalues, data, error) {\n      if (!error) {\n        setFormState(1);\n        setContext({\n          email: formvalues.email,\n          codeId: data.sendResetPasswordEmail\n        });\n      }\n    }, [setFormState]),\n    mutationResultControl: \"builtin\"\n  }; // const setEmailContext = useCallback((formValues, data, error) => {\n  //   const setEmail = useContext(SetEmailContext)\n  //   // @ts-ignore\n  //   setEmail(formValues.email)\n  // }, [])\n\n  return __jsx(EmailContext.Provider, {\n    value: context,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 5\n    }\n  }, formState == 0 && __jsx(ResetPasswordFormLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, __jsx(FormController, {\n    render: ResetPasswordEmailForm,\n    validationRules: validationRules0,\n    withQuery: true,\n    queryOptions: queryOptions0,\n    key: \"formController-0\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  })), formState == 1 && __jsx(ResetPasswordFormLayout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  }, __jsx(FormController, {\n    render: ValidateEmailCodeForm,\n    validationRules: validationRules1 // withQuery={true}\n    // queryOptions={queryOptions1}\n    ,\n    key: \"formController-1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 11\n    }\n  }))); // if (formState == 0)\n  //   return (\n  //     <ResetPasswordFormLayout>\n  //       <FormController\n  //         render={ResetPasswordEmailForm}\n  //         validationRules={validationRules0}\n  //         withQuery={true}\n  //         queryOptions={queryOptions0}\n  //         key=\"formController-0\"\n  //       />\n  //     </ResetPasswordFormLayout>\n  //   )\n  // if (formState == 1)\n  //   return (\n  //     <ResetPasswordFormLayout>\n  //       <FormController\n  //         render={ValidateEmailCodeForm}\n  //         validationRules={validationRules1}\n  //         // withQuery={true}\n  //         // queryOptions={queryOptions1}\n  //         key=\"formController-1\"\n  //       />\n  //     </ResetPasswordFormLayout>\n  //   )\n};\n\n_s2(ResetPasswordForm, \"xIf/vxygGZMFXQrbgOQzbYGAFFQ=\");\n\n_c2 = ResetPasswordForm;\nexport default withApollo()(ResetPasswordForm);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ResetPasswordFormLayout\");\n$RefreshReg$(_c2, \"ResetPasswordForm\");","map":{"version":3,"sources":["C:/Users/skaPy/IdeaProjects/Next.js-boilerplate/oozie-client/containers/forms/ResetPassword/ResetPasswordForm.tsx"],"names":["React","gql","FormController","ValidationRuleType","withApollo","useState","useCallback","ResetPasswordEmailForm","ValidateEmailCodeForm","Container","Box","Avatar","Typography","VpnKeyOutlinedIcon","makeStyles","useStyles","theme","avatar","margin","spacing","backgroundColor","palette","secondary","main","title","marginBottom","ResetPasswordFormLayout","children","styles","SEND_PASSWORD_RESET_EMAIL","validationRules0","email","rule","validationRules1","input1","only","type","input2","input3","input4","EmailContext","createContext","codeId","ResetPasswordForm","formState","setFormState","context","setContext","queryOptions0","query","resultLabel","snackbarSucceedMessage","afterResultControlCallback","formvalues","data","error","sendResetPasswordEmail","mutationResultControl"],"mappings":"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","sourcesContent":["import React, { useContext } from \"react\"\r\nimport gql from \"graphql-tag\"\r\nimport FormController, {\r\n  ValidationRules,\r\n  ValidationRuleType,\r\n  QueryOptions,\r\n} from \"components/controllers/FormController\"\r\nimport { withApollo } from \"hoc/withApollo\"\r\nimport { useState, useCallback } from \"react\"\r\nimport ResetPasswordEmailForm from \"containers/forms/ResetPassword/subForms/SendResetPsswdEmailForm\"\r\nimport ValidateEmailCodeForm from \"./subForms/ValidateEmailCodeForm\"\r\nimport { Container, Box, Avatar, Typography } from \"@material-ui/core\"\r\nimport VpnKeyOutlinedIcon from \"@material-ui/icons/VpnKeyOutlined\"\r\nimport { makeStyles } from \"@material-ui/core\"\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  title: {\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n}))\r\n\r\nconst ResetPasswordFormLayout = ({ children }: { children: JSX.Element }) => {\r\n  const styles = useStyles()\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">\r\n      <Box\r\n        marginTop={8}\r\n        display=\"flex\"\r\n        flexDirection=\"column\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Avatar className={styles.avatar}>\r\n          <VpnKeyOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\" className={styles.title}>\r\n          Mot de passe perdu\r\n        </Typography>\r\n        {children}\r\n      </Box>\r\n    </Container>\r\n  )\r\n}\r\n\r\n/* Reset password email form : step 0*/\r\nconst SEND_PASSWORD_RESET_EMAIL = gql`\r\n  mutation sendResetPasswordEmail($formValues: ResetPasswordInfos) {\r\n    sendResetPasswordEmail(resetPasswordInfos: $formValues)\r\n  }\r\n`\r\nconst validationRules0: ValidationRules = {\r\n  email: {\r\n    rule: ValidationRuleType.email,\r\n  },\r\n}\r\n\r\n/* -- */\r\n\r\n/* reset code validation form : step 1*/\r\n// const SEND_PASSWORD_RESET_EMAIL = gql`\r\n//   mutation sendResetPasswordEmail($formValues: ResetPasswordInfos) {\r\n//     sendResetPasswordEmail(resetPasswordInfos: $formValues)\r\n//   }\r\n// `\r\nconst validationRules1: ValidationRules = {\r\n  input1: {\r\n    rule: ValidationRuleType.only,\r\n    type: \"number\",\r\n  },\r\n  input2: {\r\n    rule: ValidationRuleType.only,\r\n    type: \"number\",\r\n  },\r\n  input3: {\r\n    rule: ValidationRuleType.only,\r\n    type: \"number\",\r\n  },\r\n  input4: {\r\n    rule: ValidationRuleType.only,\r\n    type: \"number\",\r\n  },\r\n}\r\n\r\n/* -- */\r\n\r\ntype EmailContext = {\r\n  email: string | null\r\n  codeId: number | null\r\n}\r\n\r\nexport const EmailContext = React.createContext({\r\n  email: null,\r\n  codeId: null,\r\n} as EmailContext)\r\n\r\nconst ResetPasswordForm = () => {\r\n  /* state of the form\r\n   * 0: init state > send reset password email form\r\n   * 1: form to validate the code received in the reset password email\r\n   * 2: form to reset the password\r\n   */\r\n  const [formState, setFormState] = useState<number>(0)\r\n\r\n  const [context, setContext] = useState<EmailContext>({\r\n    email: null,\r\n    codeId: null,\r\n  })\r\n\r\n  const queryOptions0: QueryOptions = {\r\n    query: SEND_PASSWORD_RESET_EMAIL,\r\n    resultLabel: \"sendResetPasswordEmail\",\r\n    snackbarSucceedMessage: \"Un email vous a été envoyé.\",\r\n    afterResultControlCallback: useCallback(\r\n      (formvalues, data, error) => {\r\n        if (!error) {\r\n          setFormState(1)\r\n          setContext({\r\n            email: formvalues.email,\r\n            codeId: data.sendResetPasswordEmail,\r\n          })\r\n        }\r\n      },\r\n      [setFormState]\r\n    ),\r\n    mutationResultControl: \"builtin\",\r\n  }\r\n\r\n  // const setEmailContext = useCallback((formValues, data, error) => {\r\n  //   const setEmail = useContext(SetEmailContext)\r\n  //   // @ts-ignore\r\n  //   setEmail(formValues.email)\r\n  // }, [])\r\n\r\n  return (\r\n    <EmailContext.Provider value={context}>\r\n      {/* <SetEmailContext.Provider value={setEmail}> */}\r\n      {formState == 0 && (\r\n        <ResetPasswordFormLayout>\r\n          <FormController\r\n            render={ResetPasswordEmailForm}\r\n            validationRules={validationRules0}\r\n            withQuery={true}\r\n            queryOptions={queryOptions0}\r\n            key=\"formController-0\"\r\n          />\r\n        </ResetPasswordFormLayout>\r\n      )}\r\n\r\n      {formState == 1 && (\r\n        <ResetPasswordFormLayout>\r\n          <FormController\r\n            render={ValidateEmailCodeForm}\r\n            validationRules={validationRules1}\r\n            // withQuery={true}\r\n            // queryOptions={queryOptions1}\r\n            key=\"formController-1\"\r\n          />\r\n        </ResetPasswordFormLayout>\r\n      )}\r\n      {/* </SetEmailContext.Provider> */}\r\n    </EmailContext.Provider>\r\n  )\r\n\r\n  // if (formState == 0)\r\n  //   return (\r\n  //     <ResetPasswordFormLayout>\r\n  //       <FormController\r\n  //         render={ResetPasswordEmailForm}\r\n  //         validationRules={validationRules0}\r\n  //         withQuery={true}\r\n  //         queryOptions={queryOptions0}\r\n  //         key=\"formController-0\"\r\n  //       />\r\n  //     </ResetPasswordFormLayout>\r\n  //   )\r\n\r\n  // if (formState == 1)\r\n  //   return (\r\n  //     <ResetPasswordFormLayout>\r\n  //       <FormController\r\n  //         render={ValidateEmailCodeForm}\r\n  //         validationRules={validationRules1}\r\n  //         // withQuery={true}\r\n  //         // queryOptions={queryOptions1}\r\n  //         key=\"formController-1\"\r\n  //       />\r\n  //     </ResetPasswordFormLayout>\r\n  //   )\r\n}\r\n\r\nexport default withApollo()(ResetPasswordForm)\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\skaPy\\\\IdeaProjects\\\\Next.js-boilerplate\\\\oozie-client\\\\components\\\\controllers\\\\FormController.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { useCallback, useState, useEffect, useMemo } from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { useSnackbar } from \"notistack\";\nimport omitTypename from \"utils/omitTypename\";\nimport validateEmailFormat from \"utils/validateEmailFormat\";\nimport validatePasswordFormat from \"utils/validatePasswordFormat\";\nexport let ValidationRuleType;\n\n(function (ValidationRuleType) {\n  ValidationRuleType[\"password\"] = \"password\";\n  ValidationRuleType[\"equalTo\"] = \"equalTo\";\n  ValidationRuleType[\"required\"] = \"required\";\n  ValidationRuleType[\"email\"] = \"email\";\n  ValidationRuleType[\"only\"] = \"only\";\n})(ValidationRuleType || (ValidationRuleType = {}));\n\nconst withMutation = FormComponent => props => {\n  const {\n    formValues,\n    setFormValue,\n    queryOptions,\n    setInitialFormValues\n  } = props;\n  const scnackbar = useSnackbar();\n  const [update, {\n    data,\n    loading,\n    error\n  }] = useMutation(queryOptions.query, {\n    variables: {\n      formValues\n    }\n  });\n  const submitHandler = useCallback(() => {\n    update();\n  }, [update]);\n  useEffect(() => {\n    // if (!error) {\n    let next = false;\n\n    if (queryOptions.mutationResultControl == \"builtin\") {\n      if ((data === null || data === void 0 ? void 0 : data[queryOptions.resultLabel]) && !error) next = true;\n    } else if (queryOptions.mutationResultControl && queryOptions.mutationResultControl(formValues, data, error)) next = true;\n\n    if (next) {\n      setInitialFormValues(omitTypename(data === null || data === void 0 ? void 0 : data[queryOptions.resultLabel]));\n      if (queryOptions.snackbarSucceedMessage) scnackbar.enqueueSnackbar(queryOptions.snackbarSucceedMessage);\n      if (queryOptions.afterResultControlCallback) queryOptions.afterResultControlCallback(formValues, data, error);\n\n      if (queryOptions.clearFormvaluesAfterControl) {\n        const keys = Object.keys(formValues);\n        let formValuesTemp = {};\n        keys.forEach(key => {\n          formValuesTemp = _objectSpread(_objectSpread({}, formValuesTemp), {}, {\n            [key]: \"\"\n          });\n        });\n        setFormValue(formValuesTemp);\n      }\n    } else if (data) throw new Error(`No data for the result label: ${queryOptions.resultLabel}`); // }\n\n  }, [data, error]);\n  return __jsx(FormComponent, _extends({}, props, {\n    submitHandler: submitHandler,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst FormController = (props, ...otherprops) => {\n  const {\n    initValues,\n    render,\n    withQuery = false,\n    queryOptions,\n    validationRules = null\n  } = props;\n  const {\n    0: formValues,\n    1: setFormValue\n  } = useState(_objectSpread({}, initValues));\n  const {\n    0: initialFormValues,\n    1: setInitialFormValues\n  } = useState(_objectSpread({}, initValues));\n  const {\n    0: validationResult,\n    1: setValidationResult\n  } = useState();\n  const formChangeHandler = useCallback(e => {\n    // if there an only rule on the field\n    const rule = validationRules === null || validationRules === void 0 ? void 0 : validationRules[e.target.name];\n\n    if ((rule === null || rule === void 0 ? void 0 : rule.rule) === ValidationRuleType.only) {\n      if (rule.type === \"number\") {\n        const isnum = /^\\d+$/.test(e.target.value);\n        if (isnum) setFormValue(_objectSpread(_objectSpread({}, formValues), {}, {\n          [e.target.name]: e.target.value\n        }));\n      }\n\n      if (rule.type === \"string\") {\n        const ischar = /^[a-zA-Z]+$/.test(e.target.value);\n        if (ischar) setFormValue(_objectSpread(_objectSpread({}, formValues), {}, {\n          [e.target.name]: e.target.value\n        }));\n      }\n    } else {\n      setFormValue(_objectSpread(_objectSpread({}, formValues), {}, {\n        [e.target.name]: e.target.value\n      }));\n    }\n  }, [setFormValue, formValues, validationRules]);\n  /* a revoir */\n\n  const isModified = useMemo(() => {\n    if (JSON.stringify(formValues) == JSON.stringify(initialFormValues)) return false;\n    return true;\n  }, [formValues, initialFormValues]);\n  const clearFormvalues = useCallback(() => {\n    setFormValue({});\n    setInitialFormValues({});\n  }, [setFormValue]);\n  /* validation : a revoir / complÃ©ter .. */\n\n  useEffect(() => {\n    if (validationRules) {\n      let validationResultTemp = {\n        global: true,\n        result: {}\n      };\n      const keys = Object.keys(validationRules);\n      keys.forEach(key => {\n        const field = validationRules[key];\n        /* password rule handler */\n\n        if (field.rule == ValidationRuleType.password) {\n          const result = validatePasswordFormat(formValues === null || formValues === void 0 ? void 0 : formValues[key]);\n          /* if the password format is validated, update the result for the concerned field */\n\n          if (result.length !== 0) {\n            const newKeyValue = validationResultTemp.result[key] ? validationResultTemp.result[key].concat(result) : result;\n            validationResultTemp = {\n              result: _objectSpread(_objectSpread({}, validationResultTemp.result), {}, {\n                [key]: newKeyValue\n              }),\n              global: false\n            };\n          }\n        }\n        /* equalTo rule handler */\n\n\n        if (field.rule == ValidationRuleType.equalTo) {\n          /* test if the 2 fields are equals */\n          const result = formValues[key] == formValues[field.field];\n          /* if the test result is false, update the result for the concerned field */\n\n          if (!result) {\n            const newKeyValue = validationResultTemp.result[key] ? validationResultTemp.result[key].concat(\"equalTo\") : [\"equalTo\"];\n            validationResultTemp = {\n              result: _objectSpread(_objectSpread({}, validationResultTemp.result), {}, {\n                [key]: newKeyValue\n              }),\n              global: false\n            };\n          }\n        }\n        /* required rule handler */\n\n\n        if (field.rule == ValidationRuleType.required) {\n          var _formValues$key;\n\n          /* test if there is a value in the formValues array */\n          const result = ((_formValues$key = formValues[key]) === null || _formValues$key === void 0 ? void 0 : _formValues$key.length) == 0;\n          /* if the test result is true, update the result for the concerned field */\n\n          if (result) {\n            const newKeyValue = validationResultTemp.result[key] ? validationResultTemp.result[key].concat(\"required\") : [\"required\"];\n            validationResultTemp = {\n              result: _objectSpread(_objectSpread({}, validationResultTemp.result), {}, {\n                [key]: newKeyValue\n              }),\n              global: false\n            };\n          }\n        }\n        /* email rule handler */\n\n\n        if (field.rule == ValidationRuleType.email) {\n          const result = validateEmailFormat(formValues === null || formValues === void 0 ? void 0 : formValues[key]);\n          /* if the email format is validated, update the result for the concerned field */\n\n          if (!result) {\n            const newKeyValue = validationResultTemp.result[key] ? validationResultTemp.result[key].concat(\"email\") : [\"email\"];\n            validationResultTemp = {\n              result: _objectSpread(_objectSpread({}, validationResultTemp.result), {}, {\n                [key]: newKeyValue\n              }),\n              global: false\n            };\n          }\n        }\n      });\n      setValidationResult(validationResultTemp);\n    }\n  }, [formValues, validationRules]);\n  const withMutationProps = useMemo(() => {\n    return {\n      formChangeHandler: formChangeHandler,\n      isModified,\n      formValues,\n      validationResult,\n      queryOptions,\n      setInitialFormValues,\n      setFormValue,\n      clearFormvalues\n    };\n  }, [formChangeHandler, isModified, formValues, validationResult, queryOptions, withQuery, setInitialFormValues, setFormValue]);\n  const renderProps = useMemo(() => {\n    return _objectSpread({\n      formChangeHandler: formChangeHandler,\n      isModified,\n      formValues,\n      validationResult,\n      clearFormvalues\n    }, otherprops);\n  }, [formChangeHandler, isModified, formValues, validationResult // queryOptions,\n  ]);\n\n  if (withQuery) {\n    if (!queryOptions) throw new Error(\"queryOption prop must be provided when withQuery prop is true.\"); // @ts-ignore\n\n    return withMutation(render)(withMutationProps);\n  }\n\n  return render(renderProps);\n};\n\nexport default FormController;","map":{"version":3,"sources":["C:/Users/skaPy/IdeaProjects/Next.js-boilerplate/oozie-client/components/controllers/FormController.tsx"],"names":["React","useCallback","useState","useEffect","useMemo","useMutation","useSnackbar","omitTypename","validateEmailFormat","validatePasswordFormat","ValidationRuleType","withMutation","FormComponent","props","formValues","setFormValue","queryOptions","setInitialFormValues","scnackbar","update","data","loading","error","query","variables","submitHandler","next","mutationResultControl","resultLabel","snackbarSucceedMessage","enqueueSnackbar","afterResultControlCallback","clearFormvaluesAfterControl","keys","Object","formValuesTemp","forEach","key","Error","FormController","otherprops","initValues","render","withQuery","validationRules","initialFormValues","validationResult","setValidationResult","formChangeHandler","e","rule","target","name","only","type","isnum","test","value","ischar","isModified","JSON","stringify","clearFormvalues","validationResultTemp","global","result","field","password","length","newKeyValue","concat","equalTo","required","email","withMutationProps","renderProps"],"mappings":"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","sourcesContent":["import React, { ChangeEvent } from \"react\"\r\nimport { useCallback, useState, useEffect, useMemo } from \"react\"\r\nimport { useMutation } from \"@apollo/react-hooks\"\r\nimport { useSnackbar } from \"notistack\"\r\nimport omitTypename from \"utils/omitTypename\"\r\nimport validateEmailFormat from \"utils/validateEmailFormat\"\r\nimport validatePasswordFormat from \"utils/validatePasswordFormat\"\r\nimport { DocumentNode } from \"graphql\"\r\n\r\ntype FormValues = { [key: string]: string }\r\n\r\nexport type QueryOptions = {\r\n  query: DocumentNode\r\n  resultLabel: string\r\n  mutationResultControl?:\r\n    | ((formValues: FormValues, data: any, error: any) => boolean)\r\n    | \"builtin\"\r\n  clearFormvaluesAfterControl?: boolean\r\n  afterResultControlCallback?: (\r\n    formValues: FormValues,\r\n    data: any,\r\n    error: any\r\n  ) => void\r\n  snackbarSucceedMessage?: string\r\n}\r\n\r\nexport enum ValidationRuleType {\r\n  password = \"password\",\r\n  equalTo = \"equalTo\",\r\n  required = \"required\",\r\n  email = \"email\",\r\n  only = \"only\",\r\n}\r\n\r\ntype Rule =\r\n  | {\r\n      rule: ValidationRuleType.password\r\n    }\r\n  | {\r\n      rule: ValidationRuleType.equalTo\r\n      field: string\r\n    }\r\n  | {\r\n      rule: ValidationRuleType.required\r\n    }\r\n  | {\r\n      rule: ValidationRuleType.email\r\n    }\r\n  | {\r\n      rule: ValidationRuleType.only\r\n      type: \"number\" | \"string\"\r\n    }\r\n\r\nexport type ValidationRules = { [key: string]: Rule }\r\n\r\ntype ValidationResult = {\r\n  result: { [key: string]: string[] }\r\n  global: boolean\r\n}\r\n\r\ntype WithMutationProps = {\r\n  formValues: FormValues\r\n  formChangeHandler: (event: ChangeEvent) => void\r\n  validationResult?: ValidationResult\r\n  setFormValue: (formValues: FormValues) => void\r\n  queryOptions: QueryOptions\r\n  setInitialFormValues: (formValues: FormValues) => void\r\n  clearFormvalues: () => void\r\n}\r\n\r\ntype RenderCallbackProps = {\r\n  formValues: FormValues\r\n  formChangeHandler: (event: ChangeEvent) => void\r\n  clearFormvalues: () => void\r\n  validationResult?: ValidationResult\r\n  submitHandler?: () => void\r\n  loading?: boolean\r\n  isModified?: boolean\r\n}\r\n\r\nexport type RenderCallback = (props: RenderCallbackProps) => JSX.Element\r\n\r\ntype FormControllerProps = {\r\n  initValues?: FormValues\r\n  render: RenderCallback\r\n  withQuery?: boolean\r\n  queryOptions?: QueryOptions\r\n  validationRules?: ValidationRules\r\n}\r\n\r\nconst withMutation = (FormComponent: RenderCallback) => (\r\n  props: WithMutationProps\r\n) => {\r\n  const { formValues, setFormValue, queryOptions, setInitialFormValues } = props\r\n  const scnackbar = useSnackbar()\r\n\r\n  const [update, { data, loading, error }] = useMutation(queryOptions.query, {\r\n    variables: {\r\n      formValues,\r\n    },\r\n  })\r\n\r\n  const submitHandler = useCallback(() => {\r\n    update()\r\n  }, [update])\r\n\r\n  useEffect(() => {\r\n    // if (!error) {\r\n    let next = false\r\n    if (queryOptions.mutationResultControl == \"builtin\") {\r\n      if (data?.[queryOptions.resultLabel] && !error) next = true\r\n    } else if (\r\n      queryOptions.mutationResultControl &&\r\n      queryOptions.mutationResultControl(formValues, data, error)\r\n    )\r\n      next = true\r\n\r\n    if (next) {\r\n      setInitialFormValues(omitTypename(data?.[queryOptions.resultLabel]))\r\n\r\n      if (queryOptions.snackbarSucceedMessage)\r\n        scnackbar.enqueueSnackbar(queryOptions.snackbarSucceedMessage)\r\n\r\n      if (queryOptions.afterResultControlCallback)\r\n        queryOptions.afterResultControlCallback(formValues, data, error)\r\n\r\n      if (queryOptions.clearFormvaluesAfterControl) {\r\n        const keys = Object.keys(formValues)\r\n        let formValuesTemp = {}\r\n        keys.forEach((key) => {\r\n          formValuesTemp = { ...formValuesTemp, [key]: \"\" }\r\n        })\r\n        setFormValue(formValuesTemp)\r\n      }\r\n    } else if (data)\r\n      throw new Error(\r\n        `No data for the result label: ${queryOptions.resultLabel}`\r\n      )\r\n    // }\r\n  }, [data, error])\r\n\r\n  return (\r\n    <FormComponent {...props} submitHandler={submitHandler} loading={loading} />\r\n  )\r\n}\r\n\r\nconst FormController = (props: FormControllerProps, ...otherprops: any[]) => {\r\n  const {\r\n    initValues,\r\n    render,\r\n    withQuery = false,\r\n    queryOptions,\r\n    validationRules = null,\r\n  } = props\r\n\r\n  const [formValues, setFormValue] = useState({ ...initValues })\r\n  const [initialFormValues, setInitialFormValues] = useState({ ...initValues })\r\n  const [validationResult, setValidationResult] = useState<ValidationResult>()\r\n\r\n  const formChangeHandler = useCallback(\r\n    (e) => {\r\n      // if there an only rule on the field\r\n      const rule = validationRules?.[e.target.name]\r\n      if (rule?.rule === ValidationRuleType.only) {\r\n        if (rule.type === \"number\") {\r\n          const isnum = /^\\d+$/.test(e.target.value)\r\n\r\n          if (isnum)\r\n            setFormValue({ ...formValues, [e.target.name]: e.target.value })\r\n        }\r\n        if (rule.type === \"string\") {\r\n          const ischar = /^[a-zA-Z]+$/.test(e.target.value)\r\n          if (ischar)\r\n            setFormValue({ ...formValues, [e.target.name]: e.target.value })\r\n        }\r\n      } else {\r\n        setFormValue({ ...formValues, [e.target.name]: e.target.value })\r\n      }\r\n    },\r\n    [setFormValue, formValues, validationRules]\r\n  )\r\n\r\n  /* a revoir */\r\n  const isModified = useMemo(() => {\r\n    if (JSON.stringify(formValues) == JSON.stringify(initialFormValues))\r\n      return false\r\n    return true\r\n  }, [formValues, initialFormValues])\r\n\r\n  const clearFormvalues = useCallback(() => {\r\n    setFormValue({})\r\n    setInitialFormValues({})\r\n  }, [setFormValue])\r\n\r\n  /* validation : a revoir / complÃ©ter .. */\r\n  useEffect(() => {\r\n    if (validationRules) {\r\n      let validationResultTemp: ValidationResult = { global: true, result: {} }\r\n\r\n      const keys = Object.keys(validationRules)\r\n\r\n      keys.forEach((key) => {\r\n        const field = validationRules[key]\r\n\r\n        /* password rule handler */\r\n        if (field.rule == ValidationRuleType.password) {\r\n          const result = validatePasswordFormat(formValues?.[key])\r\n\r\n          /* if the password format is validated, update the result for the concerned field */\r\n          if (result.length !== 0) {\r\n            const newKeyValue = validationResultTemp.result[key]\r\n              ? validationResultTemp.result[key].concat(result)\r\n              : result\r\n            validationResultTemp = {\r\n              result: {\r\n                ...validationResultTemp.result,\r\n                [key]: newKeyValue,\r\n              },\r\n              global: false,\r\n            }\r\n          }\r\n        }\r\n\r\n        /* equalTo rule handler */\r\n        if (field.rule == ValidationRuleType.equalTo) {\r\n          /* test if the 2 fields are equals */\r\n          const result = formValues[key] == formValues[field.field]\r\n\r\n          /* if the test result is false, update the result for the concerned field */\r\n          if (!result) {\r\n            const newKeyValue = validationResultTemp.result[key]\r\n              ? validationResultTemp.result[key].concat(\"equalTo\")\r\n              : [\"equalTo\"]\r\n            validationResultTemp = {\r\n              result: {\r\n                ...validationResultTemp.result,\r\n                [key]: newKeyValue,\r\n              },\r\n              global: false,\r\n            }\r\n          }\r\n        }\r\n\r\n        /* required rule handler */\r\n        if (field.rule == ValidationRuleType.required) {\r\n          /* test if there is a value in the formValues array */\r\n          const result = formValues[key]?.length == 0\r\n\r\n          /* if the test result is true, update the result for the concerned field */\r\n          if (result) {\r\n            const newKeyValue = validationResultTemp.result[key]\r\n              ? validationResultTemp.result[key].concat(\"required\")\r\n              : [\"required\"]\r\n            validationResultTemp = {\r\n              result: {\r\n                ...validationResultTemp.result,\r\n                [key]: newKeyValue,\r\n              },\r\n              global: false,\r\n            }\r\n          }\r\n        }\r\n\r\n        /* email rule handler */\r\n        if (field.rule == ValidationRuleType.email) {\r\n          const result = validateEmailFormat(formValues?.[key])\r\n\r\n          /* if the email format is validated, update the result for the concerned field */\r\n          if (!result) {\r\n            const newKeyValue = validationResultTemp.result[key]\r\n              ? validationResultTemp.result[key].concat(\"email\")\r\n              : [\"email\"]\r\n            validationResultTemp = {\r\n              result: {\r\n                ...validationResultTemp.result,\r\n                [key]: newKeyValue,\r\n              },\r\n              global: false,\r\n            }\r\n          }\r\n        }\r\n      })\r\n\r\n      setValidationResult(validationResultTemp)\r\n    }\r\n  }, [formValues, validationRules])\r\n\r\n  const withMutationProps = useMemo(() => {\r\n    return {\r\n      formChangeHandler: formChangeHandler,\r\n      isModified,\r\n      formValues,\r\n      validationResult,\r\n      queryOptions,\r\n      setInitialFormValues,\r\n      setFormValue,\r\n      clearFormvalues,\r\n    }\r\n  }, [\r\n    formChangeHandler,\r\n    isModified,\r\n    formValues,\r\n    validationResult,\r\n    queryOptions,\r\n    withQuery,\r\n    setInitialFormValues,\r\n    setFormValue,\r\n  ])\r\n\r\n  const renderProps = useMemo(() => {\r\n    return {\r\n      formChangeHandler: formChangeHandler,\r\n      isModified,\r\n      formValues,\r\n      validationResult,\r\n      clearFormvalues,\r\n      ...otherprops,\r\n      // queryOptions: queryOptions,\r\n    }\r\n  }, [\r\n    formChangeHandler,\r\n    isModified,\r\n    formValues,\r\n    validationResult,\r\n    // queryOptions,\r\n  ])\r\n\r\n  if (withQuery) {\r\n    if (!queryOptions)\r\n      throw new Error(\r\n        \"queryOption prop must be provided when withQuery prop is true.\"\r\n      )\r\n    // @ts-ignore\r\n    return withMutation(render)(withMutationProps)\r\n  }\r\n\r\n  return render(renderProps)\r\n}\r\n\r\nexport default FormController\r\n"]},"metadata":{},"sourceType":"module"}
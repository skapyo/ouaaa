{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ApolloClient } from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\nimport fetch from \"isomorphic-unfetch\"; // import { SchemaLink } from 'apollo-link-schema';\n// import {schema} from 'lib/server/apolloServer/schema'\n\nexport default function createApolloClient(initialState, ctx) {\n  // The `ctx` (NextPageContext) will only be present on the server.\n  // use it to extract auth headers (ctx.req) or similar.\n  var enchancedFetch = function enchancedFetch(url, init) {\n    return fetch(url, _objectSpread(_objectSpread({}, init), {}, {\n      headers: _objectSpread(_objectSpread({}, init.headers), {}, {\n        Cookie: ctx.req.headers.cookie\n      })\n    })).then(function (response) {\n      return response;\n    });\n  };\n\n  return new ApolloClient({\n    ssrMode: Boolean(ctx),\n    link: new HttpLink({\n      uri: \"http://localhost:8080/api/graphql\",\n      // Server URL (must be absolute)\n      // uri: 'https://api.graph.cool/simple/v1/cixmkt2ul01q00122mksg82pn', // Server URL (must be absolute)\n      credentials: \"include\",\n      // Additional fetch() options like `credentials` or `headers`\n      fetch: ctx ? enchancedFetch : fetch\n    }),\n    // link:new SchemaLink({schema}),\n    cache: new InMemoryCache().restore(initialState)\n  });\n}","map":{"version":3,"sources":["C:/Users/skaPy/IdeaProjects/Next.js-boilerplate/oozie-client/lib/apolloClient/apolloClient.js"],"names":["ApolloClient","InMemoryCache","HttpLink","fetch","createApolloClient","initialState","ctx","enchancedFetch","url","init","headers","Cookie","req","cookie","then","response","ssrMode","Boolean","link","uri","credentials","cache","restore"],"mappings":";;;;;;AAAA,SAASA,YAAT,QAA6B,eAA7B;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CACA;AACA;;AAEA,eAAe,SAASC,kBAAT,CAA4BC,YAA5B,EAA0CC,GAA1C,EAA+C;AAC5D;AACA;AAEA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAMC,IAAN;AAAA,WACrBN,KAAK,CAACK,GAAD,kCACAC,IADA;AAEHC,MAAAA,OAAO,kCACFD,IAAI,CAACC,OADH;AAELC,QAAAA,MAAM,EAAEL,GAAG,CAACM,GAAJ,CAAQF,OAAR,CAAgBG;AAFnB;AAFJ,OAAL,CAMGC,IANH,CAMQ,UAACC,QAAD,EAAc;AACpB,aAAOA,QAAP;AACD,KARD,CADqB;AAAA,GAAvB;;AAWA,SAAO,IAAIf,YAAJ,CAAiB;AACtBgB,IAAAA,OAAO,EAAEC,OAAO,CAACX,GAAD,CADM;AAEtBY,IAAAA,IAAI,EAAE,IAAIhB,QAAJ,CAAa;AACjBiB,MAAAA,GAAG,EAAE,mCADY;AACyB;AAC1C;AACAC,MAAAA,WAAW,EAAE,SAHI;AAGO;AACxBjB,MAAAA,KAAK,EAAEG,GAAG,GAAGC,cAAH,GAAoBJ;AAJb,KAAb,CAFgB;AAQtB;AACAkB,IAAAA,KAAK,EAAE,IAAIpB,aAAJ,GAAoBqB,OAApB,CAA4BjB,YAA5B;AATe,GAAjB,CAAP;AAWD","sourcesContent":["import { ApolloClient } from \"apollo-client\"\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\r\nimport { HttpLink } from \"apollo-link-http\"\r\nimport fetch from \"isomorphic-unfetch\"\r\n// import { SchemaLink } from 'apollo-link-schema';\r\n// import {schema} from 'lib/server/apolloServer/schema'\r\n\r\nexport default function createApolloClient(initialState, ctx) {\r\n  // The `ctx` (NextPageContext) will only be present on the server.\r\n  // use it to extract auth headers (ctx.req) or similar.\r\n\r\n  const enchancedFetch = (url, init) =>\r\n    fetch(url, {\r\n      ...init,\r\n      headers: {\r\n        ...init.headers,\r\n        Cookie: ctx.req.headers.cookie,\r\n      },\r\n    }).then((response) => {\r\n      return response\r\n    })\r\n\r\n  return new ApolloClient({\r\n    ssrMode: Boolean(ctx),\r\n    link: new HttpLink({\r\n      uri: \"http://localhost:8080/api/graphql\", // Server URL (must be absolute)\r\n      // uri: 'https://api.graph.cool/simple/v1/cixmkt2ul01q00122mksg82pn', // Server URL (must be absolute)\r\n      credentials: \"include\", // Additional fetch() options like `credentials` or `headers`\r\n      fetch: ctx ? enchancedFetch : fetch,\r\n    }),\r\n    // link:new SchemaLink({schema}),\r\n    cache: new InMemoryCache().restore(initialState),\r\n  })\r\n}\r\n"]},"metadata":{},"sourceType":"module"}